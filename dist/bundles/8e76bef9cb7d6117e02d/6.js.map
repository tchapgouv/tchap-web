{"version":3,"sources":["src/async-components/views/dialogs/EncryptedEventDialog.js"],"names":["React","require","sdk","MatrixClientPeg","module","exports","createClass","displayName","propTypes","event","PropTypes","object","isRequired","onFinished","func","getInitialState","device","componentWillMount","this","_unmounted","client","get","refreshDevice","then","dev","downloadKeys","props","getSender","setState","on","onDeviceVerificationChanged","err","console","log","componentWillUnmount","removeListener","resolve","getEventSenderDeviceInfo","userId","onKeyDown","e","keyCode","stopPropagation","preventDefault","_renderDeviceInfo","state","_t","verificationStatus","isBlocked","isVerified","getDisplayName","deviceId","getFingerprint","_renderEventInfo","getSenderKey","getKeysClaimed","ed25519","getWireContent","algorithm","getContent","msgtype","body","session_id","render","DeviceVerifyButtons","getComponent","buttons","className","onClick","autoFocus"],"mappings":"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","file":"bundles/8e76bef9cb7d6117e02d/6.js","sourcesContent":["/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nconst React = require(\"react\");\nimport PropTypes from 'prop-types';\nimport { _t } from '../../../languageHandler';\nconst sdk = require('../../../index');\nconst MatrixClientPeg = require(\"../../../MatrixClientPeg\");\n\nmodule.exports = React.createClass({\n    displayName: 'EncryptedEventDialog',\n\n    propTypes: {\n        event: PropTypes.object.isRequired,\n        onFinished: PropTypes.func.isRequired,\n    },\n\n    getInitialState: function() {\n        return { device: null };\n    },\n\n    componentWillMount: function() {\n        this._unmounted = false;\n        const client = MatrixClientPeg.get();\n\n        // first try to load the device from our store.\n        //\n        this.refreshDevice().then((dev) => {\n            if (dev) {\n                return dev;\n            }\n\n            // tell the client to try to refresh the device list for this user\n            return client.downloadKeys([this.props.event.getSender()], true).then(() => {\n                return this.refreshDevice();\n            });\n        }).then((dev) => {\n            if (this._unmounted) {\n                return;\n            }\n\n            this.setState({ device: dev });\n            client.on(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);\n        }, (err)=>{\n            console.log(\"Error downloading devices\", err);\n        });\n    },\n\n    componentWillUnmount: function() {\n        this._unmounted = true;\n        const client = MatrixClientPeg.get();\n        if (client) {\n            client.removeListener(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);\n        }\n    },\n\n    refreshDevice: function() {\n        // Promise.resolve to handle transition from static result to promise; can be removed\n        // in future\n        return Promise.resolve(MatrixClientPeg.get().getEventSenderDeviceInfo(this.props.event));\n    },\n\n    onDeviceVerificationChanged: function(userId, device) {\n        if (userId == this.props.event.getSender()) {\n            this.refreshDevice().then((dev) => {\n                this.setState({ device: dev });\n            });\n        }\n    },\n\n    onKeyDown: function(e) {\n        if (e.keyCode === 27) { // escape\n            e.stopPropagation();\n            e.preventDefault();\n            this.props.onFinished(false);\n        }\n    },\n\n    _renderDeviceInfo: function() {\n        const device = this.state.device;\n        if (!device) {\n            return (<i>{ _t('unknown device') }</i>);\n        }\n\n        let verificationStatus = (<b>{ _t('NOT verified') }</b>);\n        if (device.isBlocked()) {\n            verificationStatus = (<b>{ _t('Blacklisted') }</b>);\n        } else if (device.isVerified()) {\n            verificationStatus = _t('verified');\n        }\n\n        return (\n            <table>\n                <tbody>\n                    <tr>\n                        <td>{ _t('Name') }</td>\n                        <td>{ device.getDisplayName() }</td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Device ID') }</td>\n                        <td><code>{ device.deviceId }</code></td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Verification') }</td>\n                        <td>{ verificationStatus }</td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Ed25519 fingerprint') }</td>\n                        <td><code>{ device.getFingerprint() }</code></td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    },\n\n    _renderEventInfo: function() {\n        const event = this.props.event;\n\n        return (\n            <table>\n                <tbody>\n                    <tr>\n                        <td>{ _t('User ID') }</td>\n                        <td>{ event.getSender() }</td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Curve25519 identity key') }</td>\n                        <td><code>{ event.getSenderKey() || <i>{ _t('none') }</i> }</code></td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Claimed Ed25519 fingerprint key') }</td>\n                        <td><code>{ event.getKeysClaimed().ed25519 || <i>{ _t('none') }</i> }</code></td>\n                    </tr>\n                    <tr>\n                        <td>{ _t('Algorithm') }</td>\n                        <td>{ event.getWireContent().algorithm || <i>{ _t('unencrypted') }</i> }</td>\n                    </tr>\n                {\n                    event.getContent().msgtype === 'm.bad.encrypted' ? (\n                    <tr>\n                        <td>{ _t('Decryption error') }</td>\n                        <td>{ _t(event.getContent().body) }</td>\n                    </tr>\n                    ) : null\n                }\n                    <tr>\n                        <td>{ _t('Session ID') }</td>\n                        <td><code>{ event.getWireContent().session_id || <i>{ _t('none') }</i> }</code></td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    },\n\n    render: function() {\n        const DeviceVerifyButtons = sdk.getComponent('elements.DeviceVerifyButtons');\n\n        let buttons = null;\n        if (this.state.device) {\n            buttons = (\n                <DeviceVerifyButtons device={this.state.device}\n                    userId={this.props.event.getSender()}\n                />\n            );\n        }\n\n        return (\n            <div className=\"mx_EncryptedEventDialog\" onKeyDown={this.onKeyDown}>\n                <div className=\"mx_Dialog_title\">\n                    { _t('End-to-end encryption information') }\n                </div>\n                <div className=\"mx_Dialog_content\">\n                    <h4>{ _t('Event information') }</h4>\n                    { this._renderEventInfo() }\n\n                    <h4>{ _t('Sender device information') }</h4>\n                    { this._renderDeviceInfo() }\n                </div>\n                <div className=\"mx_Dialog_buttons\">\n                    <button className=\"mx_Dialog_primary\" onClick={this.props.onFinished} autoFocus={true}>\n                        { _t('OK') }\n                    </button>\n                    { buttons }\n                </div>\n            </div>\n        );\n    },\n});\n"],"sourceRoot":""}